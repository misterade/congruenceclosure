options{  STATIC = false;}

PARSER_BEGIN(Parser)

package parser;

import java.util.*;
import bean.Node;import verifica.Config;

public class Parser {

	private static HashMap Graph;
    private static ArrayList equals;
    private static ArrayList noEquals;
    private static ArrayList cons;
    private static ArrayList atoms;
    private static ArrayList consfn;    private static int inc=1;     private static int gg=1;     private static HashMap checkArity = new HashMap();     private static HashSet nonatom = new HashSet();
	

    public Parser(String input, HashMap G, ArrayList E, ArrayList NE, ArrayList cc, ArrayList atoms, ArrayList consfn) throws ParseException    {
      this.Graph = G;
      this.equals = E;
      this.noEquals = NE;
      this.cons = cc;
      this.atoms = atoms;
      this.consfn = consfn;      this.gg = 1;      this.inc = 1;      this.checkArity = new HashMap();      this.nonatom = new HashSet();      if( input.charAt(input.length()-1) == ';')        input = input.substring(0,input.length()-1);      /* Misuro tempo parser */      long tempo = 0;      long inizio = System.currentTimeMillis();
      new Parser(new java.io.StringReader(input)).S();      long fine = System.currentTimeMillis();      tempo += (fine - inizio);            /* reset delle strutture dati di supporto */      this.gg = 1;      this.inc = 1;      this.checkArity = new HashMap();      this.nonatom = new HashSet();    }

    public static void main(String[] args) throws Exception {
		Graph = new HashMap();
		equals = new ArrayList();
		noEquals = new ArrayList();
		try{
			new Parser(new java.io.StringReader(args[0])).S();
		}catch(	Throwable e) {
			System.out.println("Syntax check failed: " + e);
		}
  }
}

PARSER_END(Parser)

SKIP:  { " " | "\t" | "\n" | "\r"								}
TOKEN: { "=" |  "(" | ")" | "&"								| "cons"								| "car"								| "cdr"								| "!="								| "atom"								| ","								| <ALPHA: ((["a"-"z"])+(["0"-"9"])*)>								| <FUN: ((["A"-"Z"])(["a"-"z"])*(["0"-"9"])*) >								 }

void S() throws ParseException, TokenMgrError: {}
{
	F() <EOF>
}

void F() throws ParseException, TokenMgrError: {}
{
	C() ( "&" C())*
}

void C() throws ParseException, TokenMgrError: {
  Node L;
  Node R;
  Token swi;
  }
 {
	L=T() (swi="=" | swi="!=") R=T()
	{
	  if(swi.image.equals("="))	  {
	    equals.add(L);
	    equals.add(R);	  }else	  {
	    noEquals.add(L);
        noEquals.add(R);        L.addForbidden(R);        R.addForbidden(L);	  }	}
    | "atom" "(" L=T() ")"
    {
      atoms.add(L);    }    | "!atom" "(" L=T() ")"    {            if(!nonatom.contains("-atom("+L.getId()+")"))      {        nonatom.add("-atom("+L.getId()+")");        String consKey = "cons(f_"+inc+","+"ff_"+inc+")";        ArrayList argCons = new ArrayList();                Node t1;        Graph.put("f_"+inc,t1 = new Node("f_"+inc));        argCons.add(t1);                Node t2;        Graph.put("ff_"+inc,t2 = new Node("ff_"+inc));        argCons.add(t2);        Node nodeCons;        Graph.put(consKey,nodeCons = new Node(consKey,"cons",argCons));        t1.appendParent(nodeCons);        t2.appendParent(nodeCons);        consfn.add(nodeCons);                ArrayList args = new ArrayList();        args.add(nodeCons);                Node car;        Node cdr;        Graph.put("car("+consKey+")", car = new Node("car("+consKey+")","car",args));        Graph.put("cdr("+consKey+")", cdr = new Node("cdr("+consKey+")","cdr",args));                nodeCons.appendParent(car);        nodeCons.appendParent(cdr);                cons.add(car);        cons.add(t1);        cons.add(cdr);        cons.add(t2);        //System.out.println("--"+inc);        equals.add(L);        equals.add(nodeCons);        inc++;      }          } 
 
}


Node T() throws ParseException, TokenMgrError: {
  Node tmp;
  Token a;
  Token fun;
  Node v;
  Node u;
  int argsl=0;
  ArrayList argFun=new ArrayList();
  String myKey;
  String myArgs="";
   }
{
	"cons" "(" v=T() "," u=T() ")" 
	{
		myKey = "cons("+v.getId()+","+u.getId()+")";

		// Aggiungo questo cons nella lista dei cons da controllare per soddisfacibilità
		
		// Adesso devo aggiungere questo nodo nel grafo (prima controllo se già esiste)
		if(Graph.containsKey(myKey))
			tmp = (Node)Graph.get(myKey);
		else{
			ArrayList argCons = new ArrayList();
			ArrayList args = new ArrayList();

            /* Aggiungo il nodo cons nel grafo con i suoi argomenti */
			argCons.add(v);
			argCons.add(u);
			Graph.put(myKey,tmp = new Node(myKey,"cons",argCons));
			
            /* Aggiungo i nodi di car e cdr associato al nodo cons */
			args.add(tmp);			Node t1,t2;
			Graph.put("car("+myKey+")",  t1 = new Node("car("+myKey+")","car",args));
			Graph.put("cdr("+myKey+")",  t2 = new Node("cdr("+myKey+")","cdr",args));
            /* Aggiungo nella mia lista i due padri car e cdr */            tmp.appendParent(t1);            tmp.appendParent(t2);            
			/* Aggiungo nella lista dei cons i nodi che dovranno essere "mergati" */
			cons.add(t1);
			cons.add(v);
			cons.add(t1);
            cons.add(u);
		}				v.appendParent(tmp);        u.appendParent(tmp);        consfn.add(tmp);
		return tmp;
	}
	| 
	"car" "(" v=T() ")"
	{
		myKey = "car("+v.getId()+")";
		
		
		// Adesso devo aggiungere questo nodo nel grafo (prima controllo se già esiste)
		if(Graph.containsKey(myKey))
			tmp = (Node)Graph.get(myKey);
		else{
			ArrayList args = new ArrayList();
			args.add(v);
			Graph.put(myKey,tmp = new Node(myKey,"car",args));
		}        // Aggiungo il mio identificatore nella lista dei padri dei miei due figli        v.appendParent(tmp);		
		return tmp;
	}
	| 
	"cdr" "(" v=T() ")"
	{
		myKey = "cdr("+v.getId()+")";
		
		
		// Adesso devo aggiungere questo nodo nel grafo (prima controllo se già esiste)
		if(Graph.containsKey(myKey))
			tmp = (Node)Graph.get(myKey);
		else{
			ArrayList args = new ArrayList();
			args.add(v);
			Graph.put(myKey,tmp = new Node(myKey,"cdr",args));
		}		// Aggiungo il mio identificatore nella lista dei padri dei miei due figli        v.appendParent(tmp);
		return tmp;
	}
	|
	fun=<FUN> "(" v=T() (","u=T(){ myArgs=myArgs+","+u.getId();argFun.add(u);argsl++; })* ")"
	{	
		argsl++; /* Mi mantiene il numero di argomenti della funzione */
		
		/* Devo controllare che questa funzione con una arietà diversa non sia già presente */        //System.out.println(fun.image);		if(!checkArity.containsKey(fun.image))		{		  checkArity.put(fun.image,argsl);		  		}else		{		  //System.out.println(Integer.parseInt(checkArity.get(fun.image).toString()));		  if(Integer.parseInt(checkArity.get(fun.image).toString()) != argsl)		      throw new ParseException("errore con una fun "+fun.image);		}
		/* Se arrivo qui significa che è andato tutto bene e posso aggiungere */
		myKey=fun.image+"("+v.getId()+myArgs+")";
        //System.out.println("myKey fun "+myKey);
		argFun.add(v); /* aggiungo l'ultimo argomento alla lista dei parametri */
        if(!Graph.containsKey(myKey))               Graph.put(myKey,tmp = new Node(myKey,fun.image,argFun));        else            tmp = (Node)Graph.get(myKey);		
		/* Aggiungo il padre a tutti i figli */
		Iterator i = argFun.iterator();
		String ss;
		while(i.hasNext()){
			Node temp = (Node)(i.next());
			temp.appendParent(tmp);
		}
        /* Devo controllare se la funzione già essite per evitare di sovrascriverla         * può causare problemi in caso di funzioni annidate         * F(F(a))=a;F(a)!=a         */

		return tmp;
	}
	| 
	a=<ALPHA>
	{
		// Quando incontro un terminale, se non è già nel grafo allora lo aggiungo
		if(Graph.containsKey(a.image))
			tmp = (Node)Graph.get(a.image);
		else
			Graph.put(a.image,tmp = new Node(a.image));
		return tmp;
	}
}
