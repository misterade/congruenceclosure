/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import java.util.*;
import bean.Node;
import verifica.Config;

public class Parser implements ParserConstants {

        private static HashMap Graph;
    private static ArrayList equals;
    private static ArrayList noEquals;
    private static ArrayList cons;
    private static ArrayList atoms;
    private static ArrayList consfn;
    private static int inc=1;
     private static int gg=1;
     private static HashMap checkArity = new HashMap();
     private static HashSet nonatom = new HashSet();


    public Parser(String input, HashMap G, ArrayList E, ArrayList NE, ArrayList cc, ArrayList atoms, ArrayList consfn) throws ParseException
    {
      this.Graph = G;
      this.equals = E;
      this.noEquals = NE;
      this.cons = cc;
      this.atoms = atoms;
      this.consfn = consfn;
      this.gg = 1;
      this.inc = 1;
      this.checkArity = new HashMap();
      this.nonatom = new HashSet();
      if( input.charAt(input.length()-1) == ';')
        input = input.substring(0,input.length()-1);
      /* Misuro tempo parser */
      long tempo = 0;
      long inizio = System.currentTimeMillis();
      new Parser(new java.io.StringReader(input)).S();
      long fine = System.currentTimeMillis();
      tempo += (fine - inizio);


      /* reset delle strutture dati di supporto */
      this.gg = 1;
      this.inc = 1;
      this.checkArity = new HashMap();
      this.nonatom = new HashSet();
    }

    public static void main(String[] args) throws Exception {
                Graph = new HashMap();
                equals = new ArrayList();
                noEquals = new ArrayList();
                try{
                        new Parser(new java.io.StringReader(args[0])).S();
                }catch( Throwable e) {
                        System.out.println("Syntax check failed: " + e);
                }
  }

  final public void S() throws ParseException, ParseException, TokenMgrError {
    F();
    jj_consume_token(0);
  }

  final public void F() throws ParseException, ParseException, TokenMgrError {
    C();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(8);
      C();
    }
  }

  final public void C() throws ParseException, ParseException, TokenMgrError {
  Node L;
  Node R;
  Token swi;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
    case 10:
    case 11:
    case ALPHA:
    case FUN:
      L = T();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
        swi = jj_consume_token(5);
        break;
      case 12:
        swi = jj_consume_token(12);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      R = T();
          if(swi.image.equals("="))
          {
            equals.add(L);
            equals.add(R);
          }else
          {
            noEquals.add(L);
        noEquals.add(R);
        L.addForbidden(R);
        R.addForbidden(L);
          }
      break;
    case 13:
      jj_consume_token(13);
      jj_consume_token(6);
      L = T();
      jj_consume_token(7);
      atoms.add(L);
      break;
    case 17:
      jj_consume_token(17);
      jj_consume_token(6);
      L = T();
      jj_consume_token(7);
      if(!nonatom.contains("-atom("+L.getId()+")"))
      {
        nonatom.add("-atom("+L.getId()+")");
        String consKey = "cons(f_"+inc+","+"ff_"+inc+")";

        ArrayList argCons = new ArrayList();

        Node t1;
        Graph.put("f_"+inc,t1 = new Node("f_"+inc));
        argCons.add(t1);

        Node t2;
        Graph.put("ff_"+inc,t2 = new Node("ff_"+inc));
        argCons.add(t2);

        Node nodeCons;
        Graph.put(consKey,nodeCons = new Node(consKey,"cons",argCons));

        t1.appendParent(nodeCons);
        t2.appendParent(nodeCons);

        consfn.add(nodeCons);

        ArrayList args = new ArrayList();
        args.add(nodeCons);

        Node car;
        Node cdr;
        Graph.put("car("+consKey+")", car = new Node("car("+consKey+")","car",args));
        Graph.put("cdr("+consKey+")", cdr = new Node("cdr("+consKey+")","cdr",args));

        nodeCons.appendParent(car);
        nodeCons.appendParent(cdr);


        cons.add(car);
        cons.add(t1);
        cons.add(cdr);
        cons.add(t2);
        //System.out.println("--"+inc);
        equals.add(L);
        equals.add(nodeCons);
        inc++;
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Node T() throws ParseException, ParseException, TokenMgrError {
  Node tmp;
  Token a;
  Token fun;
  Node v;
  Node u;
  int argsl=0;
  ArrayList argFun=new ArrayList();
  String myKey;
  String myArgs="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
      jj_consume_token(9);
      jj_consume_token(6);
      v = T();
      jj_consume_token(14);
      u = T();
      jj_consume_token(7);
                myKey = "cons("+v.getId()+","+u.getId()+")";

                // Aggiungo questo cons nella lista dei cons da controllare per soddisfacibilità

                // Adesso devo aggiungere questo nodo nel grafo (prima controllo se già esiste)
                if(Graph.containsKey(myKey))
                        tmp = (Node)Graph.get(myKey);
                else{
                        ArrayList argCons = new ArrayList();
                        ArrayList args = new ArrayList();

            /* Aggiungo il nodo cons nel grafo con i suoi argomenti */
                        argCons.add(v);
                        argCons.add(u);
                        Graph.put(myKey,tmp = new Node(myKey,"cons",argCons));

            /* Aggiungo i nodi di car e cdr associato al nodo cons */
                        args.add(tmp);
                        Node t1,t2;
                        Graph.put("car("+myKey+")",  t1 = new Node("car("+myKey+")","car",args));
                        Graph.put("cdr("+myKey+")",  t2 = new Node("cdr("+myKey+")","cdr",args));

            /* Aggiungo nella mia lista i due padri car e cdr */
            tmp.appendParent(t1);
            tmp.appendParent(t2);

                        /* Aggiungo nella lista dei cons i nodi che dovranno essere "mergati" */
                        cons.add(t1);
                        cons.add(v);
                        cons.add(t1);
            cons.add(u);
                }

                v.appendParent(tmp);
        u.appendParent(tmp);
        consfn.add(tmp);
                {if (true) return tmp;}
      break;
    case 10:
      jj_consume_token(10);
      jj_consume_token(6);
      v = T();
      jj_consume_token(7);
                myKey = "car("+v.getId()+")";


                // Adesso devo aggiungere questo nodo nel grafo (prima controllo se già esiste)
                if(Graph.containsKey(myKey))
                        tmp = (Node)Graph.get(myKey);
                else{
                        ArrayList args = new ArrayList();
                        args.add(v);
                        Graph.put(myKey,tmp = new Node(myKey,"car",args));
                }
        // Aggiungo il mio identificatore nella lista dei padri dei miei due figli
        v.appendParent(tmp);

                {if (true) return tmp;}
      break;
    case 11:
      jj_consume_token(11);
      jj_consume_token(6);
      v = T();
      jj_consume_token(7);
                myKey = "cdr("+v.getId()+")";


                // Adesso devo aggiungere questo nodo nel grafo (prima controllo se già esiste)
                if(Graph.containsKey(myKey))
                        tmp = (Node)Graph.get(myKey);
                else{
                        ArrayList args = new ArrayList();
                        args.add(v);
                        Graph.put(myKey,tmp = new Node(myKey,"cdr",args));
                }
                // Aggiungo il mio identificatore nella lista dei padri dei miei due figli
        v.appendParent(tmp);
                {if (true) return tmp;}
      break;
    case FUN:
      fun = jj_consume_token(FUN);
      jj_consume_token(6);
      v = T();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(14);
        u = T();
                                       myArgs=myArgs+","+u.getId();argFun.add(u);argsl++;
      }
      jj_consume_token(7);
                argsl++; /* Mi mantiene il numero di argomenti della funzione */

                /* Devo controllare che questa funzione con una arietà diversa non sia già presente */
        //System.out.println(fun.image);
                if(!checkArity.containsKey(fun.image))
                {
                  checkArity.put(fun.image,argsl);

                }else
                {
                  //System.out.println(Integer.parseInt(checkArity.get(fun.image).toString()));
                  if(Integer.parseInt(checkArity.get(fun.image).toString()) != argsl)
                      {if (true) throw new ParseException("errore con una fun "+fun.image);}
                }

                /* Se arrivo qui significa che è andato tutto bene e posso aggiungere */
                myKey=fun.image+"("+v.getId()+myArgs+")";
        //System.out.println("myKey fun "+myKey);
                argFun.add(v); /* aggiungo l'ultimo argomento alla lista dei parametri */

        if(!Graph.containsKey(myKey))
          Graph.put(myKey,tmp = new Node(myKey,fun.image,argFun));
        else
            tmp = (Node)Graph.get(myKey);

                /* Aggiungo il padre a tutti i figli */
                Iterator i = argFun.iterator();
                String ss;
                while(i.hasNext()){
                        Node temp = (Node)(i.next());
                        temp.appendParent(tmp);
                }
        /* Devo controllare se la funzione già essite per evitare di sovrascriverla
         * può causare problemi in caso di funzioni annidate
         * F(F(a))=a;F(a)!=a
         */

                {if (true) return tmp;}
      break;
    case ALPHA:
      a = jj_consume_token(ALPHA);
                // Quando incontro un terminale, se non è già nel grafo allora lo aggiungo
                if(Graph.containsKey(a.image))
                        tmp = (Node)Graph.get(a.image);
                else
                        Graph.put(a.image,tmp = new Node(a.image));
                {if (true) return tmp;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x1020,0x3ae00,0x4000,0x18e00,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
